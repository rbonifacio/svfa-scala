package br.unb.cic.android

import br.unb.cic.soot.JSVFATest
import br.unb.cic.soot.graph.{SinkNode, SourceNode}
import soot.{G, Scene}
import soot.options.Options

import scala.collection.JavaConverters._

trait FlowdroidSpec {
  val sourceList = List(
      "<javax.servlet.ServletRequest: java.lang.String getParameter(java.lang.String)>",
      "<org.springframework.security.config.http.CsrfBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getCsrfLogoutHandler)>",
      "<org.springframework.security.config.authentication.CachingUserDetailsService: org.springframework.security.core.userdetails.UserDetails loadUserByUsername(java.lang.String)>",
      "<org.springframework.security.core.userdetails.UserDetailsByNameServiceWrapper: org.springframework.security.core.userdetails.UserDetails loadUserDetails(org.springframework.security.core.Authentication)>",
      "<java.io.File: java.io.File getAbsoluteFile()>",
      "<org.apache.commons.jxpath.ri.parser.XPathParser: java.lang.String unescape(java.lang.String)>",
      "<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginPage)>",
      "<org.apache.xmlrpc.webserver.HttpServletRequestImpl: java.lang.String getRealPath(java.lang.String)>",
      "<com.google.auth.oauth2.UserCredentials: java.lang.String getClientSecret)>",
      "<org.springframework.web.servlet.tags.UrlTag: java.lang.String createQueryString(java.util.List,java.util.Set,boolean)>",
      "<org.springframework.messaging.simp.stomp.StompDecoder: java.lang.String unescape(java.lang.String)>",
      "<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl)>",
      "<java.io.File: java.io.File getCanonicalFile()>",
      "<org.apache.commons.jxpath.ri.JXPathContextReferenceImpl: java.lang.Object getValue(java.lang.String)>",
      "<org.apache.xmlrpc.webserver.RequestData: java.lang.String getMethod)>",
      "<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentials(com.google.api.client.http.HttpTransport)>",
      "<org.jsoup.nodes.Entities: java.lang.String unescape(java.lang.String)>",
      "<org.springframework.util.DefaultPropertiesPersister: java.lang.String unescape(java.lang.String)>",
      "<org.owasp.webgoat.plugins.Plugin: void loadFiles(java.nio.file.Path)>",
      "<org.apache.xmlrpc.webserver.HttpServletResponseImpl: java.lang.String getHeader(java.lang.String)>",
      "<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentialsFromCode(java.lang.String,java.net.URI)>",
      "<org.dmfs.oauth2.client.http.requests.ResourceOwnerPasswordTokenRequest: org.dmfs.httpclient.HttpRequestEntity requestEntity)>",
      "<org.owasp.webgoat.util.HtmlEncoder: java.lang.String decode(java.lang.String)>",
      "<javax.naming.ldap.Rdn: java.lang.Object unescapeValue(java.lang.String)>",
      "<org.apache.xmlrpc.webserver.XmlRpcServletServer: org.apache.xmlrpc.common.XmlRpcHttpRequestConfigImpl getConfig(javax.servlet.http.HttpServletRequest)>",
      "<org.apache.xmlrpc.webserver.HttpServletRequestImpl: void parsePostData(java.util.Map,java.io.InputStream,java.lang.String)>",
      "<org.springframework.security.concurrent.DelegatingSecurityContextExecutorService: java.util.concurrent.ExecutorService getDelegate)>",
      "<org.springframework.security.config.annotation.web.builders.HttpSecurity: org.springframework.security.config.'annotation'.web.configurers.HeadersConfigurer headers)>",
      "<org.springframework.web.servlet.tags.EscapeBodyTag: java.lang.String readBodyContent)>",
      "<org.springframework.web.util.UrlPathHelper: java.lang.String decodeRequestString(javax.servlet.http.HttpServletRequest,java.lang.String)>",
      "<org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder: org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder requestAttr(java.lang.String,java.lang.Object)>",
      "<com.google.auth.oauth2.UserAuthorizer: com.google.auth.oauth2.UserCredentials getCredentials(java.lang.String)>",
      "<org.springframework.web.socket.sockjs.transport.handler.JsonpReceivingTransportHandler: java.lang.String[] readMessages(org.springframework.http.server.ServerHttpRequest)>",
      "<com.google.auth.oauth2.DefaultCredentialsProvider: com.google.auth.oauth2.GoogleCredentials getDefaultCredentialsUnsynchronized(com.google.api.client.http.HttpTransport)>",
      "<org.springframework.security.config.http.FormLoginBeanDefinitionParser: java.lang.String getLoginProcessingUrl)>",
      "<org.apache.xmlrpc.webserver.HttpServletRequestImpl: java.lang.String readLine(byte[])>",
      "<org.springframework.security.config.http.LogoutBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition getLogoutRequestMatcher(java.lang.String)>",
      "<org.springframework.security.config.annotation.web.configurers.LogoutConfigurer: java.util.List getLogoutHandlers)>",
      "<org.apache.xmlrpc.webserver.RequestData: java.lang.String getHttpVersion)>",
      "<com.novell.ldap.rfc2251.RfcFilter: byte[] unescapeString(java.lang.String)>",
      "<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)>",
      "<com.google.auth.oauth2.DefaultCredentialsProvider: java.io.File getWellKnownCredentialsFile()>",
      "<org.apache.xmlrpc.webserver.HttpServletRequestImpl: void parseParameters)>",
      "<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)>",
      "<javax.servlet.ServletRequestWrapper: java.lang.String getParameter(java.lang.String)>",
      "<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
      "<org.apache.http.util.EntityUtils: java.lang.String toString(org.apache.http.HttpEntity)>",
      "<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>",
      "<android.location.Location: double getLatitude()>",
      "<android.location.Location: double getLongitude()>",
      "<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>",
      "<android.telephony.TelephonyManager: java.lang.String getDeviceId()> android.permission.READ_PHONE_STATE",
      "<android.telephony.TelephonyManager: java.lang.String getSubscriberId()> android.permission.READ_PHONE_STATE",
      "<android.telephony.TelephonyManager: java.lang.String getSimSerialNumber()> android.permission.READ_PHONE_STATE",
      "<android.telephony.TelephonyManager: java.lang.String getLine1Number()> android.permission.READ_PHONE_STATE",
      "<org.apache.http.HttpResponse: org.apache.http.HttpEntity getEntity()>",
      "<android.media.AudioRecord: int read(short[],int,int)>",
      "<android.media.AudioRecord: int read(byte[],int,int)>",
      "<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>",
      "<android.content.pm.PackageManager: java.util.List getInstalledApplications(int)>",
      "<android.content.pm.PackageManager: java.util.List getInstalledPackages(int)>",
      "<android.content.pm.PackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>",
      "<android.content.pm.PackageManager: java.util.List queryIntentServices(android.content.Intent,int)>",
      "<android.content.pm.PackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>",
      "<android.content.pm.PackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>",
      "<android.content.SharedPreferences: android.content.SharedPreferences getDefaultSharedPreferences(android.content.Context)>",
      "<android.bluetooth.BluetoothAdapter: java.lang.String getAddress()>",
      "<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>",
      "<java.util.Locale: java.lang.String getCountry()>",
      "<android.net.wifi.WifiInfo: java.lang.String getSSID()>",
      "<android.telephony.gsm.GsmCellLocation: int getCid()>",
      "<android.telephony.gsm.GsmCellLocation: int getLac()>",
      "<android.accounts.AccountManager: android.accounts.Account[] getAccounts()>",
      "<java.util.Calendar: java.util.TimeZone getTimeZone()>",
      "<android.provider.Browser: android.database.Cursor getAllBookmarks()>",
      "<android.provider.Browser: android.database.Cursor getAllVisitedUrls()>",
      "<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>",
      "<android.database.Cursor: java.lang.String getString(int)>",
      "<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>",
      "<java.net.URLConnection: java.io.InputStream getInputStream()>",
      "<java.net.URL: java.io.InputStream openStream()>",
      "<java.net.URL: java.lang.Object getContent()>",
      "<java.net.URL: java.lang.Object getContent(java.lang.Class[])>",
  )

  val sinkList = List(
      "<javax.persistence.EntityManager: javax.persistence.TypedQuery createQuery(java.lang.String,java.lang.Class)>",
      "<javax.servlet.http.HttpServletResponse: void sendRedirect(java.lang.String)>",
      "<java.io.File: boolean delete()>",
      "<org.apache.xalan.xsltc.runtime.BasisLibrary: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])>",
      "<org.springframework.mock.web.portlet.MockPortletRequest: void setParameters(java.util.Map)>",
      "<org.apache.axis2.description.AxisService: void printWSDLError(java.io.OutputStream)>",
      "<org.springframework.mock.web.portlet.MockPortletRequest: void setParameter(java.lang.String,java.lang.String)>",
      "<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(char[])>",
      "<org.apache.xmlrpc.webserver.XmlRpcServletServer: void setResponseHeader(org.apache.xmlrpc.common.ServerStreamConnection,java.lang.String,java.lang.String)>",
      "<net.sourceforge.pebble.domain.Comment: void setAuthenticated(boolean)>",
      "<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>",
      "<org.springframework.web.socket.server.support.WebSocketHttpRequestHandler: void handleRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",
      "<org.apache.xmlrpc.server.ReflectiveXmlRpcHandler: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)>",
      "<com.mysql.jdbc.Statement: java.sql.ResultSet executeQuery(java.lang.String)>",
      "<org.springframework.test.context.transaction.TransactionalTestExecutionListener: void runAfterTransactionMethods(org.springframework.test.context.TestContext)>",
      "<org.springframework.web.servlet.tags.UrlTag: java.lang.String createUrl()>",
      "<org.apache.xmlrpc.webserver.XmlRpcServlet: void log(java.lang.String)>",
      "<org.apache.stratos.cli.StratosApplication: int run(java.lang.String[])>",
      "<org.owasp.webgoat.session.ParameterParser: void update(javax.servlet.ServletRequest)>",
      "<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.CharSequence)>",
      "<org.apache.xmlrpc.webserver.XmlRpcServletServer: void execute(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>",
      "<org.apache.xmlrpc.webserver.ServletOutputStreamImpl: void write(byte[],int,int)>",
      "<org.apache.xmlrpc.webserver.ConnectionServer: void writeResponse(org.apache.xmlrpc.common.XmlRpcStreamRequestConfig,java.io.OutputStream,java.lang.Object)>",
      "<org.apache.xmlrpc.webserver.Connection: void writeResponseHeader(org.apache.xmlrpc.webserver.RequestData,int)>",
      "<org.apache.bcel.util.JavaWrapper: void runMain(java.lang.String,java.lang.String[])>",
      "<org.springframework.format.datetime.joda.PeriodFormatter: java.lang.Object parse(java.lang.String,java.util.Locale)>",
      "<org.apache.xerces.impl.xs.models.XSDFACM: void dumpTree(org.apache.xerces.impl.dtd.models.CMNode,int)>",
      "<org.springframework.jdbc.core.JdbcTemplate: java.lang.Object query(java.lang.String,org.springframework.jdbc.core.ResultSetExtractor)>",
      "<org.owasp.webgoat.session.DatabaseUtilities: java.sql.Connection getHsqldbConnection(java.lang.String,org.owasp.webgoat.session.WebgoatContext)>",
      "<org.springframework.jdbc.core.JdbcTemplate: void execute(java.lang.String)>",
      "<org.springframework.mock.web.MockBodyContent: void println(java.lang.String)>",
      "<org.owasp.webgoat.HammerHead: void log(javax.servlet.http.HttpServletRequest,java.lang.String)>",
      "<org.apache.xmlrpc.server.XmlRpcServerWorker: java.lang.Object execute(org.apache.xmlrpc.XmlRpcRequest)>",
      "<org.owasp.webgoat.session.LessonSession: void setAuthenticated(boolean)>",
      "<org.springframework.orm.hibernate3.support.ClobStringType: int[] sqlTypes()>",
      "<org.owasp.webgoat.session.WebSession: void update(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.String)>",
      "<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: boolean replace(java.lang.Object,java.lang.Object,java.lang.Object)>",
      "<org.apache.xmlrpc.webserver.WebServer: void setParanoid(boolean)>",
      "<com.novell.ldap.rfc2251.RfcFilter: void addSubstring(int,byte[])>",
      "<org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession: void handleMessage(org.springframework.web.socket.TextMessage,org.springframework.web.socket.WebSocketSession)>",
      "<org.xmldb.api.base.XMLDBException: void printStackTrace(java.io.PrintWriter)>",
      "<org.springframework.web.socket.adapter.standard.StandardWebSocketSession: void sendTextMessage(org.springframework.web.socket.TextMessage)>",
      "<org.apache.xerces.impl.xpath.regex.REUtil: void dumpString(java.lang.String)>",
      "<org.apache.xalan.xsltc.compiler.util.Util: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String[])>",
      "<org.apache.http.impl.conn.DefaultClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>",
      "<org.apache.commons.validator.util.ValidatorUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>",
      "<com.google.json.JsonSanitizer: void replace(int,int,java.lang.String)>",
      "<org.owasp.esapi.reference.validation.StringValidationRule: void addBlacklistPattern(java.util.regex.Pattern)>",
      "<org.apache.commons.lang3.text.StrSubstitutor: java.lang.String replace(java.lang.CharSequence,int,int)>",
      "<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>",
      "<org.hibernate.validator.internal.util.ConcurrentReferenceHashMap: java.lang.Object replace(java.lang.Object,java.lang.Object)>",
      "<org.springframework.security.util.FieldUtils: void setProtectedFieldValue(java.lang.String,java.lang.Object,java.lang.Object)>",
      "<org.springframework.mock.web.MockBodyContent: void println(char[])>",
      "<org.springframework.test.context.junit4.SpringJUnit4ClassRunner: void runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)>",
      "<org.springframework.web.socket.handler.ConcurrentWebSocketSessionDecorator: void sendMessage(org.springframework.web.socket.WebSocketMessage)>",
      "<org.springframework.orm.hibernate3.TypeDefinitionBean: void setParameters(java.util.Properties)>",
      "<org.springframework.format.datetime.joda.DateTimeParser: org.joda.time.DateTime parse(java.lang.String,java.util.Locale)>",
      "<org.apache.commons.io.HexDump: void dump(byte[],long,java.io.OutputStream,int)>",
      "<org.springframework.mock.web.MockJspWriter: void println(java.lang.String)>",
      "<org.apache.xalan.templates.ElemTemplateElement: org.w3c.dom.Node replaceChild(org.w3c.dom.Node,org.w3c.dom.Node)>",
      "<org.springframework.web.socket.config.HandlersBeanDefinitionParser: org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)>",
      "<com.github.scribejava.core.oauth.OAuth20Service: com.github.scribejava.core.model.OAuth2AccessToken sendAccessTokenRequestSync(com.github.scribejava.core.model.OAuthRequest)>",
      "<com.github.scribejava.core.oauth.OAuth20Service: java.util.concurrent.Future sendAccessTokenRequestAsync(com.github.scribejava.core.model.OAuthRequestAsync,com.github.scribejava.core.model.OAuthAsyncRequestCallback)>",
      "<org.apache.xmlrpc.client.XmlRpcClient: java.lang.Object execute(java.lang.String,java.lang.Object[])>",
      "<java.lang.Runtime: java.lang.Process exec(java.lang.String)>",
      "<org.apache.xpath.jaxp.XPathImpl: javax.xml.xpath.XPathExpression compile(java.lang.String)>",
      "<org.jsoup.parser.Parser: org.jsoup.nodes.Document parse(java.lang.String,java.lang.String)>",
      "<org.jsoup.nodes.Node: org.jsoup.nodes.Node before(java.lang.String)>",
      "<org.jsoup.nodes.Node: org.jsoup.nodes.Node after(java.lang.String)>",
      "<javax.servlet.http.HttpServletResponseWrapper: void sendRedirect(java.lang.String)>",
      "<java.net.URLConnection: void connect()>",
      "<java.net.URLConnection: java.io.OutputStream getOutputStream()>",
      "<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)>",
      "<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>",
      "<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)>",
      "<android.os.Bundle: void putBoolean(java.lang.String,boolean)>",
      "<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])>",
      "<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)>",
      "<android.os.Bundle: void putByte(java.lang.String,byte)>",
      "<android.os.Bundle: void putByteArray(java.lang.String,byte[])>",
      "<android.os.Bundle: void putChar(java.lang.String,char)>",
      "<android.os.Bundle: void putCharArray(java.lang.String,char[])>",
      "<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)>",
      "<android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])>",
      "<android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)>",
      "<android.os.Bundle: void putDouble(java.lang.String,double)>",
      "<android.os.Bundle: void putDoubleArray(java.lang.String,double[])>",
      "<android.os.Bundle: void putFloat(java.lang.String,float)>",
      "<android.os.Bundle: void putFloatArray(java.lang.String,float[])>",
      "<android.os.Bundle: void putInt(java.lang.String,int)>",
      "<android.os.Bundle: void putIntArray(java.lang.String,int[])>",
      "<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)>",
      "<android.os.Bundle: void putLong(java.lang.String,long)>",
      "<android.os.Bundle: void putLongArray(java.lang.String,long[])>",
      "<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)>",
      "<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])>",
      "<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)>",
      "<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)>",
      "<android.os.Bundle: void putShort(java.lang.String,short)>",
      "<android.os.Bundle: void putShortArray(java.lang.String,short[])>",
      "<android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)>",
      "<android.os.Bundle: void putString(java.lang.String,java.lang.String)>",
      "<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])>",
      "<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)>",
      "<android.os.Bundle: void putAll(android.os.Bundle)>",
      "<android.util.Log: int d(java.lang.String,java.lang.String)>",
      "<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>",
      "<android.util.Log: int e(java.lang.String,java.lang.String)>",
      "<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>",
      "<android.util.Log: int i(java.lang.String,java.lang.String)>",
      "<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>",
      "<android.util.Log: int v(java.lang.String,java.lang.String)>",
      "<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>",
      "<android.util.Log: int w(java.lang.String,java.lang.Throwable)>",
      "<android.util.Log: int w(java.lang.String,java.lang.String)>",
      "<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>",
      "<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)>",
      "<android.util.Log: int wtf(java.lang.String,java.lang.String)>",
      "<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)>",
      "<java.io.OutputStream: void write(byte[])>",
      "<java.io.OutputStream: void write(byte[],int,int)>",
      "<java.io.OutputStream: void write(int)>",
      "<java.io.Writer: void write(char[])>",
      "<java.io.Writer: void write(char[],int,int)>",
      "<java.io.Writer: void write(int)>",
      "<java.io.Writer: void write(java.lang.String)>",
      "<java.io.Writer: void write(java.lang.String,int,int)>",
      "<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>",
      "<java.io.OutputStreamWriter: java.io.Writer append(java.lang.CharSequence)>",
      "<android.content.Intent: android.content.Intent setAction(java.lang.String)>",
      "<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.Class)>",
      "<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>",
      "<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>",
      "<android.content.Context: void sendBroadcast(android.content.Intent)>",
      "<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>",
      "<android.content.Context: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>",
      "<android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>",
      "<android.media.MediaRecorder: void setVideoSource(int)>",
      "<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>",
      "<android.media.MediaRecorder: void start()>",
      "<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>",
      "<android.content.Context: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>",
      "<android.content.IntentFilter: void addAction(java.lang.String)>",
      "<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS",
      "<android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)> android.permission.SEND_SMS",
      "<android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)> android.permission.SEND_SMS",
      "<java.net.Socket: void connect(java.net.SocketAddress)>",
      "<android.os.Handler: boolean sendMessage(android.os.Message)>",
      "<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>",
      "<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)>",
      "<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>",
      "<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>",
      "<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>",
      "<android.content.Context: void startActivities(android.content.Intent[])>",
      "<android.content.Context: void startActivities(android.content.Intent[],android.os.Bundle)>",
      "<android.content.Context: android.content.ComponentName startService(android.content.Intent)>",
      "<android.content.Context: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",
      "<android.content.Context: void sendBroadcast(android.content.Intent)>",
      "<android.content.Context: void sendBroadcast(android.content.Intent,java.lang.String)>",
      "<android.app.Activity: void setResult(int,android.content.Intent)>",
      "<android.app.Activity: void startActivities(android.content.Intent[])>",
      "<android.app.Activity: void startActivities(android.content.Intent[],android.os.Bundle)>",
      "<android.app.Activity: void startActivityForResult(android.content.Intent,int)>",
      "<android.app.Activity: void startActivityForResult(android.content.Intent,int,android.os.Bundle)>",
      "<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int,android.os.Bundle)>",
      "<android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>",
      "<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int,android.os.Bundle)>",
      "<android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)>",
      "<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int,android.os.Bundle)>",
      "<android.app.Activity: void startActivityIfNeeded(android.content.Intent,int)>",
      "<android.app.Activity: android.content.ComponentName startService(android.content.Intent)>",
      "<android.app.Activity: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>",
      "<android.app.Activity: void sendBroadcast(android.content.Intent)>",
      "<android.app.Activity: void sendBroadcast(android.content.Intent,java.lang.String)>",
      "<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle)>",
      "<android.app.Activity: void sendBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String)>",
      "<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.app.Activity: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>",
      "<android.app.Activity: void sendOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.app.Activity: void sendStickyBroadcast(android.content.Intent)>",
      "<android.app.Activity: void sendStickyBroadcastAsUser(android.content.Intent,android.os.UserHandle)>",
      "<android.app.Activity: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.app.Activity: void sendStickyOrderedBroadcastAsUser(android.content.Intent,android.os.UserHandle,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>",
      "<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>",
      "<android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])>",
      "<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>",
      "<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>",
      "<android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)>",
      "<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
      "<org.apache.http.client.HttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>",
      "<java.lang.ProcessBuilder: java.lang.Process start()>",
      "<java.net.URLConnection: java.io.InputStream getInputStream()>",
      "<java.net.URL: java.io.InputStream openStream()>",
      "<java.net.URL: java.lang.Object getContent()>",
      "<java.net.URL: java.lang.Object getContent(java.lang.Class[])>",
  )
}